---
# nginx configuration for a simple reverse proxy to an app deployed in the same namespace
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Values.app_name }}-nginx-proxy-conf"
  namespace: "{{ .Release.Namespace }}"
data:
  nginx.conf: |
    events {}
    http {
      upstream backend_upstream {
        server {{ .Values.backend.serviceName | default .Values.app_name }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.backend.servicePort }};
        keepalive 4;
      }

      map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
      }

      # HTTP -> HTTPS redirect
      server {
        listen 80;
        listen [::]:80;
        return 301 https://$host$request_uri;
      }

      # HTTPS reverse proxy
      server {
        listen 443 ssl;
        listen [::]:443 ssl;

        ssl_certificate     /etc/nginx/tls/tls.crt;
        ssl_certificate_key /etc/nginx/tls/tls.key;

        client_max_body_size {{ .Values.nginx.clientMaxBodySize | default "525M" }};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        location / {
          proxy_pass http://backend_upstream;
        }
      }
    }